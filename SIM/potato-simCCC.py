#!/usr/bin/python3 

import gzip, sys, time, os, random
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# specific seqbreed modules
from src import genome as gg
from src import selection as sel

#-------------------------------------------------------------
# generates genotype matrix X
#-------------------------------------------------------------
def generateGenoPhenoTables (X, y, gfeatures):
    nMarkers = X.shape [0]
    nSamples = X.shape [1]

    markerNames = []
    for i in range (1,nMarkers+1): 
      markerNames.append ("snp"+str(i).zfill (3))

    sampleNames = []
    for i in range (1,nSamples+1): 
      sampleNames.append ("sample"+str(i).zfill (3))

    #matrix = np.reshape (X, (nMarkers, nSamples))
    df = pd.DataFrame (X.astype(int), columns=sampleNames, index=markerNames)
    df.index.name = "Marker"
    df.to_csv (outDir+"/genotype-simulated-SeqBreed-tetra.csv", index=True, header=True)

    dfY = pd.DataFrame (y, columns=["TraitX"], index=sampleNames)
    dfY.index.name = "Sample"
    dfY.to_csv (outDir+"/phenotype-simulated-SeqBreed-tetra.csv", index=True, header=True)

    # Create Map file: MarkerName, Ref, Alt, Chrom, Pos  
    basesRefAlt = [("A","G"), ("G","A"),("C","T"),("T","C")]
    mapMarkers = []
    posMarker = 0
    for i in gfeatures.chrs:
        name = i.name
        posList = i.pos
        for p in posList:
            refAlt = random.choice (basesRefAlt)
            mapMarkers.append ((markerNames[posMarker], refAlt[0], refAlt[1], name, p))
            posMarker+=1

    cpDF = pd.DataFrame (mapMarkers, columns=["Marker", "Ref", "Alt", "Chrom", "Pos"])
    cpDF.to_csv (outDir+"/genotype-simulated-SeqBreed-tetra-MAP.csv", index=False, header=True)

    return (mapMarkers)

#------------------------------------------------------------------
# Utility to create a directory safely.
#------------------------------------------------------------------
def createDir (dir):
	def checkExistingDir (dir):
		if os.path.lexists (dir):
			headDir, tailDir = os.path.split (dir)
			oldDir = os.path.join (headDir, "old-" + tailDir)
			if os.path.lexists (oldDir):
					checkExistingDir (oldDir)

			os.rename (dir, oldDir)
	checkExistingDir (dir)
	os.system ("mkdir %s" % dir)

#-------------------------------------------------------------
# Main
#-------------------------------------------------------------
H2    = 0.9
NSNPs = 10
MODEL = "dom"

args = sys.argv
outDir   = args [1]
createDir (outDir)

# Set current dir, working dir, and input file dir
cdir = os.getcwd()
wdir = cdir
ddir = cdir

# working files, seqfile contains snp positions from vcf
# this file is generated by gg.GFounder below
seqfile = 'seq.pos'

# list of chips that can be analyzed, include sequence as output from gg.GFounder()
chipfiles = [seqfile]

# contains qtn positions
qtnfile = outDir + '/qtns.tsv' 
# snp file in gen format
genfile = ddir + '/potato-gen.tsv'
# goto working directory
os.chdir(wdir)

#---------------------------------------------------------------
# STEP 1: uploads genotypes and generates snp positions (snpFile)
# NOTE that ploidy level must be specified if gen format
#---------------------------------------------------------------
gbase = gg.GFounder(vcfFile=genfile, snpFile=seqfile, ploidy=4)

#---------------------------------------------------------------
# STEP 2: generates Genome object with chr names, recombination map, etc
#---------------------------------------------------------------
gfeatures = gg.Genome(snpFile=seqfile, ploidy=gbase.ploidy)

# prints some basic info
gfeatures.print()

#---------------------------------------------------------------
# STEP 3: read QTN file
#---------------------------------------------------------------
#qtn = gg.QTNs(h2=[0.9], genome=gfeatures, qtnFile=qtnfile)
qtn = gg.QTNs(h2=[H2], genome=gfeatures, nqtn=NSNPs, fixModel=MODEL, fixValue=2)
qtn.get_var(gfeatures,gbase, fixModel=MODEL, fixValue=2)
qtn.print(gfeatures, qtnFile=qtnfile)

# STEP 4: generate base population
pop = gg.Population(gfeatures, pedFile=None, generation=None, qtns=qtn, gfounders=gbase)

# STEP 5: Simulate a F2 between the 10 most extreme lowest and highest lines for second phenotype
#--> Sort phenotypes and sel parents

# STEP 5: GWAS
# generate chip objects
chipseq = gg.Chip(chipFile=seqfile, genome=gfeatures, name='seq_chip')

# generates genotype and phenotype tables 
X = gg.do_X(pop.inds, gfeatures, gbase, chip=chipseq)
itrait = 0
y = np.array(list(pop.inds[i].y[itrait] for i in range(pop.n))) # phenotypes
generateGenoPhenoTables (X, y, gfeatures)

# GWAS with snps listed in first chip
gwas = sel.Gwas(X, chipseq)
gwas.fit (pop.inds, trait=0)
gwas.plot (plotFile=outDir+"/gwas-plot.pdf", fdr=True)    # FDR


gwas.printSNPs(gfeatures, gwasFile=outDir+"/gwas-results.csv")  # prints gwas results

# GWAS with two - PCA corrected phenotypes
pca = sel.Pca(X)
pca.fit()
y = np.array(list(ind.y[itrait] for ind in pop.inds))
y = y - pca.p[:,0] - pca.p[:,1] # y corrected
gwas.fit(y=y, trait=itrait)
gwas.plot (plotFile=outDir+"/gwas-plot-pca.pdf", fdr=True)    # FDR
gwas.printSNPs(gfeatures, gwasFile=outDir+"/gwas-results-pca.csv")  # prints gwas results

